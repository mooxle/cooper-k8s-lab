# Infrastructure Overview Template
# Cooper'n'80s Enterprise Infrastructure Documentation
#
# Purpose: Template for documenting unified infrastructure platforms
# Usage: Enterprise infrastructure documentation and CMDB population
# Note: Replace EXAMPLE values with actual deployment information

infrastructure:
  # Platform Identification
  name: "EXAMPLE-infrastructure"
  display_name: "EXAMPLE Enterprise Platform"
  platform_type: "unified-container-platform"
  deployment_model: "docker-compose"
  environment: "production"  # Options: dev, staging, production
  
  # Infrastructure Status
  status:
    operational_status: "active"  # Options: active, maintenance, deprecated
    last_updated: "YYYY-MM-DD"
    platform_version: "v1.0.0"
    next_maintenance: "YYYY-MM-DD"
    
  # Platform Architecture
  architecture:
    deployment_strategy: "unified-compose-stack"
    service_discovery: "docker-network"
    orchestration: "docker-compose"
    configuration_management: "infrastructure-as-code"
    
  # Service Inventory
  services:
    version_control:
      service_name: "EXAMPLE-git-server"
      technology: "forgejo"
      version: "1.21"
      purpose: "source-code-management"
      criticality: "high"
      
    secrets_management:
      service_name: "EXAMPLE-vault"
      technology: "hashicorp-vault"
      version: "1.15.6"
      purpose: "enterprise-secrets"
      criticality: "high"
      
    # Template for additional services
    monitoring:
      service_name: "EXAMPLE-monitoring"
      technology: "prometheus-grafana"
      version: "latest"
      purpose: "infrastructure-monitoring"
      criticality: "medium"
      status: "planned"
      
  # Network Architecture
  network:
    physical_network:
      subnet: "10.0.1.0/24"
      vlan: "10"
      gateway: "10.0.1.1"
      dns_domain: "EXAMPLE.local"
      
    container_network:
      network_name: "EXAMPLE-infrastructure"
      driver: "bridge"
      subnet: "172.20.0.0/16"
      isolation: "internal-communication"
      
    external_access:
      - service: "git-server"
        hostname: "git.EXAMPLE.com"
        ports: [3000, 2222]
      - service: "vault"
        hostname: "vault.EXAMPLE.com" 
        ports: [8200]
        
  # Storage Architecture
  storage:
    persistent_storage:
      base_path: "/opt/EXAMPLE-infrastructure"
      backup_strategy: "container-level"
      encryption: "filesystem-level"
      
    service_storage:
      git_repositories:
        path: "/opt/EXAMPLE-infrastructure/git"
        purpose: "source-code-storage"
        backup_priority: "critical"
        
      secrets_storage:
        path: "/opt/EXAMPLE-infrastructure/vault"
        purpose: "encrypted-secrets"
        backup_priority: "critical"
        encryption: "vault-internal"
        
  # Security Architecture
  security:
    authentication:
      primary_method: "ssh-key"
      identity_provider: "local-user-management"
      session_management: "service-native"
      
    authorization:
      access_control: "service-level-rbac"
      policy_enforcement: "application-native"
      audit_logging: "service-logs"
      
    encryption:
      secrets_at_rest: "vault-encryption"
      network_traffic: "planned-tls"
      storage_encryption: "filesystem-level"
      
    key_management:
      ssh_keys: "vault-centralized"
      service_secrets: "vault-managed"
      infrastructure_keys: "password-manager"
      
  # Backup and Recovery
  backup:
    primary_strategy:
      method: "container-host-backup"
      frequency: "24h"
      retention: "multiple-restore-points"
      geographic_distribution: 3
      
    recovery_objectives:
      recovery_time_objective: "1h"
      recovery_point_objective: "24h"
      business_continuity: "acceptable-downtime"
      
    critical_data:
      - component: "git-repositories"
        priority: "critical"
        recovery_method: "container-restore"
      - component: "vault-data"
        priority: "critical"
        recovery_method: "vault-unseal"
      - component: "configuration"
        priority: "high"
        recovery_method: "infrastructure-as-code"
        
  # Monitoring and Observability
  monitoring:
    health_monitoring:
      method: "docker-health-checks"
      monitoring_interval: "30s"
      alerting: "planned"
      
    performance_monitoring:
      metrics_collection: "planned-prometheus"
      log_aggregation: "docker-logs"
      dashboards: "planned-grafana"
      
    operational_monitoring:
      service_availability: "http-health-checks"
      resource_utilization: "container-metrics"
      security_monitoring: "access-logs"
      
  # Integration Architecture
  integrations:
    current_integrations:
      - source: "git-server"
        target: "vault"
        purpose: "ssh-key-management"
        method: "manual-configuration"
        
    planned_integrations:
      - source: "vault"
        target: "kubernetes"
        purpose: "secrets-injection"
        method: "external-secrets-operator"
        
      - source: "git-server"
        target: "ci-cd"
        purpose: "automation-trigger"
        method: "webhook-integration"
        
      - source: "monitoring"
        target: "all-services"
        purpose: "observability"
        method: "metrics-collection"
        
  # Operational Procedures
  operations:
    deployment_procedures:
      method: "infrastructure-as-code"
      automation_level: "semi-automated"
      deployment_validation: "health-checks"
      
    maintenance_procedures:
      maintenance_window: "sunday-02:00-04:00"
      update_strategy: "rolling-restart"
      testing_requirements: "functional-validation"
      
    incident_response:
      escalation_procedure: "internal-lab"
      communication_method: "documentation"
      recovery_procedures: "documented-runbooks"
      
  # Future Roadmap
  roadmap:
    phase_1:
      timeframe: "next-30-days"
      objectives:
        - "TLS encryption implementation"
        - "Monitoring stack deployment"
        - "Automated backup validation"
        
    phase_2:
      timeframe: "next-90-days"
      objectives:
        - "Kubernetes cluster integration"
        - "CI/CD pipeline implementation"
        - "Advanced monitoring and alerting"
        
    phase_3:
      timeframe: "next-180-days"
      objectives:
        - "Multi-environment deployment"
        - "Advanced security hardening"
        - "Disaster recovery automation"

# Template Usage Guidelines:
# 1. Replace all EXAMPLE placeholders with actual values
# 2. Customize service inventory for your platform
# 3. Update network configuration for your environment
# 4. Adjust security architecture based on requirements
# 5. Modify backup strategy to match infrastructure
# 6. Document actual integration points and dependencies
#
# Enterprise Integration:
# - Use for NetBox service documentation
# - Integration with ITSM systems
# - Infrastructure inventory management
# - Compliance and audit documentation